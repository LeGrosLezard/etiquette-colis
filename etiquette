import cv2
import numpy as np
import imutils
import math
from scipy.spatial import distance as dist


image = cv2.imread("1.jpg")

cap = cv2.VideoCapture(0)

while True:
    _, frame = cap.read()
    gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
    edges = cv2.Canny(gray , 30 , 255)



    contours, _ = cv2.findContours(edges, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_NONE)
    for contour in contours:
        area = cv2.contourArea(contour)
        if area > 100:
            approx = cv2.approxPolyDP(contour,0.01*cv2.arcLength(contour,True),True)

            if len(approx)>10:
                rect = cv2.minAreaRect(contour)
                box = cv2.boxPoints(rect)
                box = np.int0(box)
                cv2.drawContours(frame,[box],0,(0, 0, 255), 2)
                x, y, w, h = cv2.boundingRect(contour)

                
                bbox = box.tolist()


                cv2.circle(frame, (bbox[1][0], bbox[1][1]), 1, (0, 255, 0), 5)
                cv2.circle(frame, (bbox[3][0], bbox[3][1]), 1, (0, 0, 255), 5)
                cv2.circle(frame, (bbox[0][0], bbox[0][1]), 1, (255, 0, 0), 5)

                cv2.imshow("Frame", frame)
                cv2.waitKey(0)
            

                op = dist.euclidean(bbox[3], bbox[0])
                hypo = dist.euclidean(bbox[1], bbox[3])
                adj = dist.euclidean(bbox[0], bbox[1])



                angle =  math.degrees(math.atan((op)/(adj)))

                print(angle)



                crop = frame[y:y+h, x:x+w]


                height_crop, width_crop = crop.shape[:2]
                height_frame, width_frame = frame.shape[:2]

                image = cv2.resize(image, (width_crop, height_crop))
                
                height_, width_ = image.shape[:2]
                center = (int(width_/2), int(height_/2))
                M = cv2.getRotationMatrix2D(center, angle, 1)
                image = cv2.warpAffine(image, M, (width_, height_))


                

               

                image = cv2.copyMakeBorder(
                    image,
                    top=y,
                    bottom=int(frame.shape[0] - (y+h) ),
                    left=x,
                    right=int(frame.shape[1] - (x+w)),
                    borderType=cv2.BORDER_CONSTANT,
                    value=[255, 255, 255]
                )


                cv2.imshow("image", image)


                print(frame.shape[:2])
                print(image.shape[:2])

                image = cv2.resize(image, (width_frame, height_frame))
                added_image = cv2.addWeighted(frame, 1, image, 0.5, 0)

                cv2.imshow("added_image", added_image)



  



            
    cv2.imshow("Frame", frame)


    
    if cv2.waitKey(0) & 0xFF == ord('q'):
        break


            






